%!PS
%
% Copyright (c) 2017, Klaus-Dieter Ost, SMO GmbH Software Manufaktur, All rights reserved
% 
% dictionary.ps - additional operators

% empty the content of a dictionary
% dictionary empty.dict --> |
/empty.dict {
    dup /curdict exch def
    {
	pop
	curdict exch undef
    } forall
} def

% select elements of a dictionary, where the key is matching a criterion
% dictionary filter --> subdict
/dict.select {
    /select.filter exch def		% dictionary
    dup length dict /result exch def	% dictionary
    {					% key value
	1 index				% key value key
	select.filter {			% key value
	    result 3 1 roll		% result key value
	    put				% |
	} {				% key value
	    pop pop 			% |
	} ifelse
    } forall
    result
} def

% select elements of a dictionary, where the key is matching a criterion, also returning non-matching criteria
% dictionary filter --> matching non-matching
/dict.select2 {
    /select.filter exch def		% dictionary
    dup length dict /result exch def	% dictionary
    dup length dict /unresult exch def	% dictionary
    {					% key value
	1 index				% key value key
	select.filter {			% key value
	    result 3 1 roll		% result key value
	    put				% |
	} {				% key value
	    unresult 3 1 roll		% unresult key value
	    put				% |
	} ifelse
    } forall
    result
    unresult
} def

% select elements of a dictionary, where the value is matching a criterion
% dictionary filter --> subdict
/dict.select.value {
    /select.filter exch def		% dictionary
    dup length dict /result exch def	% dictionary
    {					% key value
	dup				% key value value
	select.filter {			% key value
	    result 3 1 roll		% result key value
	    put				% |
	} {				% key value
	    pop pop 			% |
	} ifelse
    } forall
    result
} def

% select elements of a dictionary, where the value is matching a criterion, also returning non-matching criteria
% dictionary filter --> matching non-matching
/dict.select2.value {
    /select.filter exch def		% dictionary
    dup length dict /result exch def	% dictionary
    dup length dict /unresult exch def	% dictionary
    {					% key value
	dup				% key value value
	select.filter {			% key value
	    result 3 1 roll		% result key value
	    put				% |
	} {				% key value
	    unresult 3 1 roll		% unresult key value
	    put				% |
	} ifelse
    } forall
    result
    unresult
} def

% create an array of dictionary keys
% dictionayr --> array
/dict.vtoc {
    dup length array /arr exch def	% dict
    /ix 0 def				% dict
    {
	pop				% key
	arr exch ix exch put		% |
	/ix ix 1 add def
    } forall
    arr
} def

% "reverts" a dictionary, mapping values to keys; undefined behaviour, if values are not unique
% dict --> dict true | false
/dict.revert {
    dup type /dicttype eq {	% dict
	dup length dict		% dict new-dict
	dup 3 -1 roll		% new-dict new-dict dict
	{			% new-dict new-dict key value
	    exch put dup	% new-dict new-dict
	} forall
	pop true		% new-dict bool
    } {				% dict
	pop false		% bool
    } ifelse			% returns bool
} def

% check, if two dictionaries are equal: same number of entries, (key, value) pairs match
% dict1 dict2 --> bool
/dict.eq {
    2 copy				% dict1 dict2 dict1 dict2
    length exch length eq		% dict1 dict2 bool
    {
	% same length, compare entries
	{				% dict1 value2 key2
	    3 copy exch pop		% dict1 value2 key2 dict1 key2
	    known			% dict1 value2 key2 bool
	    not {
		% not found - dictionaries differ
		pop pop pop
		false exit
	    } if			% dict1 value2 key2

	    3 copy exch pop		% dict1 value2 key2 dict1 key2
	    get exch pop 		% dict1 value2 value1
	    eq 				% dict1 bool
	    not {			% dict1 bool
		% key is known, but value differs
		pop
		false exit
	    } if			% dict1
	} forall			% dict1
	% succeeded so far ==> dictionaries are equal
	pop true
    } {
	false				% length is different
    } ifelse
} def

% add key-value pairs of dict2 to dict1
% aborts on error
% dict1 dict2 --> dict1
/dict.add {
    2 copy type				% dict1 dict2 dict1 type
    exch type				% dict1 dict2 type type

    dup /dicttype ne			% dict1 dict2 type type bool
    3 1 roll eq and			% dict1 dict2 bool
    {					% dict1 dict2
	(*** dict.add expects two dictionaries ***) logstack
	quit
    } if

    1 index exch			% dict1 dict1 dict2
    {					% dict1 dict1 value2 key2
	put dup				% dict1 dict1
    } forall
    pop					% dict1
} def

% dictionary.ps ends here ------------------------------------------
